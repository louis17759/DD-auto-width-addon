{"version":3,"file":"static/js/script.code.js","mappings":"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","sources":["script/service.ts"],"sourcesContent":["/*global DingdocsScript*/\n\n/**\n * AI表格边栏插件服务层\n * 运行在 Web Worker 中，提供AI表格操作的核心功能\n */\n\n// 获取当前激活的数据表\nfunction getActiveSheet() {\n  try {\n    const base = DingdocsScript.base;\n    const sheet = base.getActiveSheet();\n    if (!sheet) {\n      throw new Error('未找到激活的数据表');\n    }\n    return {\n      id: sheet.getId(),\n      name: sheet.getName(),\n      desc: sheet.getDesc() || '',\n      fieldsCount: sheet.getFields().length\n    };\n  } catch (error: any) {\n    throw new Error(`获取激活数据表失败: ${error.message}`);\n  }\n}\n\n// 获取所有数据表列表\nfunction getAllSheets() {\n  try {\n    const base = DingdocsScript.base;\n    const sheets = base.getSheets();\n    return sheets.map((sheet: any) => ({\n      id: sheet.getId(),\n      name: sheet.getName(),\n      desc: sheet.getDesc() || '',\n      fieldsCount: sheet.getFields().length\n    }));\n  } catch (error: any) {\n    throw new Error(`获取数据表列表失败: ${error.message}`);\n  }\n}\n\n// 创建新的数据表\nfunction createSheet(name: string) {\n  try {\n    if (!name || name.trim() === '') {\n      throw new Error('数据表名称不能为空');\n    }\n    \n    const base = DingdocsScript.base;\n    // 创建带有基本字段的数据表\n    const sheet = base.insertSheet(name.trim(), [\n      { name: '标题', type: 'text' },\n      { name: '状态', type: 'singleSelect' },\n      { name: '创建时间', type: 'date' }\n    ]);\n    \n    return {\n      id: sheet.getId(),\n      name: sheet.getName(),\n      desc: sheet.getDesc() || '',\n      fieldsCount: sheet.getFields().length\n    };\n  } catch (error: any) {\n    throw new Error(`创建数据表失败: ${error.message}`);\n  }\n}\n\n// 删除数据表\nfunction deleteSheet(sheetId: string) {\n  try {\n    if (!sheetId) {\n      throw new Error('数据表ID不能为空');\n    }\n    console.log('sheetId', sheetId);\n    const base = DingdocsScript.base;\n    base.deleteSheet(sheetId);\n    return { success: true };\n  } catch (error: any) {\n    throw new Error(`删除数据表失败: ${error.message}`);\n  }\n}\n\n// 获取数据表字段信息\nfunction getSheetFields(sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const fields = sheet.getFields();\n    return fields.map((field: any) => ({\n      id: field.getId(),\n      name: field.getName(),\n      type: field.getType(),\n      isPrimary: field.isPrimary?.() || false,\n    }));\n  } catch (error: any) {\n    throw new Error(`获取字段信息失败: ${error.message}`);\n  }\n}\n\n// 添加字段\nfunction addField(name: string, type: string, sheetId?: string) {\n  try {\n    if (!name || name.trim() === '') {\n      throw new Error('字段名称不能为空');\n    }\n    \n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const field = sheet.insertField({\n      name: name.trim(),\n      type: type as any\n    });\n    \n    return {\n      id: field.getId(),\n      name: field.getName(),\n      type: field.getType(),\n      isPrimary: field.isPrimary?.() || false\n    };\n  } catch (error: any) {\n    throw new Error(`添加字段失败: ${error.message}`);\n  }\n}\n\n// 删除字段\nfunction deleteField(fieldId: string, sheetId?: string) {\n  try {\n    if (!fieldId) {\n      throw new Error('字段ID不能为空');\n    }\n    \n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    // 检查是否为主键字段\n    const field = sheet.getField(fieldId);\n    if (field && field.isPrimary?.()) {\n      throw new Error('不能删除主键字段');\n    }\n    \n    sheet.deleteField(fieldId);\n    return { success: true };\n  } catch (error: any) {\n    throw new Error(`删除字段失败: ${error.message}`);\n  }\n}\n\n// 获取记录数据\nasync function getRecords(sheetId?: string, pageSize = 20) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const result = await sheet.getRecordsAsync({ pageSize });\n    \n    return {\n      records: result.records.map((record: any) => ({\n        id: record.getId(),\n        fields: record.getCellValues()\n      })),\n      hasMore: result.hasMore,\n      cursor: result.cursor,\n      total: result.records.length\n    };\n  } catch (error: any) {\n    throw new Error(`获取记录失败: ${error.message}`);\n  }\n}\n\n// 添加记录\nasync function addRecord(fields: Record<string, any>, sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const records = await sheet.insertRecordsAsync([{ fields }]);\n    const record = records[0];\n    \n    return {\n      id: record.getId(),\n      fields: record.getCellValues()\n    };\n  } catch (error: any) {\n    throw new Error(`添加记录失败: ${error.message}`);\n  }\n}\n\n// 更新记录\nasync function updateRecord(recordId: string, fields: Record<string, any>, sheetId?: string) {\n  try {\n    if (!recordId) {\n      throw new Error('记录ID不能为空');\n    }\n    \n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const records = await sheet.updateRecordsAsync([{ id: recordId, fields }]);\n    const record = records[0];\n    \n    return {\n      id: record.getId(),\n      fields: record.getCellValues()\n    };\n  } catch (error: any) {\n    throw new Error(`更新记录失败: ${error.message}`);\n  }\n}\n\n// 删除记录\nasync function deleteRecord(recordId: string, sheetId?: string) {\n  try {\n    if (!recordId) {\n      throw new Error('记录ID不能为空');\n    }\n    \n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    await sheet.deleteRecordsAsync(recordId);\n    return { success: true };\n  } catch (error: any) {\n    throw new Error(`删除记录失败: ${error.message}`);\n  }\n}\n\n// 获取文档信息\nfunction getDocumentInfo() {\n  try {\n    const base = DingdocsScript.base;\n    const uuid = base.getDentryUuid();\n    const sheets = base.getSheets();\n    \n    return {\n      uuid,\n      sheetsCount: sheets.length,\n      currentSheet: base.getActiveSheet()?.getName() || '无'\n    };\n  } catch (error: any) {\n    throw new Error(`获取文档信息失败: ${error.message}`);\n  }\n}\n\n// 获取当前视图\nfunction getActiveView(sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const views = sheet.getViews();\n    const gridView = views.find((view: any) => view.getType() === 'Grid');\n    \n    if (!gridView) {\n      throw new Error('未找到表格视图');\n    }\n    \n    return gridView.asGridView();\n  } catch (error: any) {\n    throw new Error(`获取视图失败: ${error.message}`);\n  }\n}\n\n// 获取所有视图\nfunction getAllViews(sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const views = sheet.getViews();\n    return views.map((view: any) => ({\n      id: view.getId(),\n      name: view.getName(),\n      type: view.getType()\n    }));\n  } catch (error: any) {\n    throw new Error(`获取视图列表失败: ${error.message}`);\n  }\n}\n\n// 按内容调整列宽\nasync function adjustColumnWidthByContent(applyScope: string = 'current', sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheets = [];\n    \n    // 根据应用范围获取数据表\n    if (applyScope === 'allSheets') {\n      sheets = base.getSheets();\n    } else {\n      const sheet = sheetId ? base.getSheet(sheetId) : base.getActiveSheet();\n      if (!sheet) {\n        throw new Error('未找到指定的数据表');\n      }\n      sheets = [sheet];\n    }\n    \n    let totalViewsCount = 0;\n    \n    for (const sheet of sheets) {\n      const views = sheet.getViews();\n      const targetViews = applyScope === 'current'\n        ? [views.find((v: any) => v.getType() === 'Grid')].filter(Boolean)\n        : views.filter((v: any) => v.getType() === 'Grid');\n      \n      if (targetViews.length === 0) continue;\n      \n      // 获取所有记录来计算内容宽度\n      const records = await sheet.getRecordsAsync({ pageSize: 100 });\n      const fields = sheet.getFields();\n      \n      for (const view of targetViews) {\n        const gridView = view.asGridView();\n        \n        for (const field of fields) {\n          const fieldId = field.getId();\n          const fieldName = field.getName();\n          \n          // 计算字段名称宽度（每个字符约14px，加上padding）\n          let maxWidth = fieldName.length * 14 + 40;\n          \n          // 计算内容宽度\n          for (const record of records.records) {\n            const value = record.getCellValue(fieldId);\n            if (value !== null && value !== undefined) {\n              let contentLength = 0;\n              if (typeof value === 'string') {\n                contentLength = value.length;\n              } else if (typeof value === 'object' && value.text) {\n                contentLength = value.text.length;\n              } else {\n                contentLength = String(value).length;\n              }\n              const width = contentLength * 14 + 40;\n              maxWidth = Math.max(maxWidth, width);\n            }\n          }\n          \n          // 限制宽度范围：最小100px，最大500px\n          maxWidth = Math.max(100, Math.min(500, maxWidth));\n          gridView.setFieldWidth(fieldId, maxWidth);\n        }\n        totalViewsCount++;\n      }\n    }\n    \n    return { success: true, viewsCount: totalViewsCount, sheetsCount: sheets.length };\n  } catch (error: any) {\n    throw new Error(`调整列宽失败: ${error.message}`);\n  }\n}\n\n// 按表头调整列宽\nfunction adjustColumnWidthByHeader(applyScope: string = 'current', sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheets = [];\n    \n    // 根据应用范围获取数据表\n    if (applyScope === 'allSheets') {\n      sheets = base.getSheets();\n    } else {\n      const sheet = sheetId ? base.getSheet(sheetId) : base.getActiveSheet();\n      if (!sheet) {\n        throw new Error('未找到指定的数据表');\n      }\n      sheets = [sheet];\n    }\n    \n    let totalViewsCount = 0;\n    \n    for (const sheet of sheets) {\n      const views = sheet.getViews();\n      const targetViews = applyScope === 'current'\n        ? [views.find((v: any) => v.getType() === 'Grid')].filter(Boolean)\n        : views.filter((v: any) => v.getType() === 'Grid');\n      \n      if (targetViews.length === 0) continue;\n      \n      const fields = sheet.getFields();\n      \n      for (const view of targetViews) {\n        const gridView = view.asGridView();\n        \n        for (const field of fields) {\n          const fieldId = field.getId();\n          const fieldName = field.getName();\n          \n          // 计算字段名称宽度（每个字符约14px，加上padding）\n          let width = fieldName.length * 14 + 40;\n          \n          // 限制宽度范围：最小100px，最大400px\n          width = Math.max(100, Math.min(400, width));\n          gridView.setFieldWidth(fieldId, width);\n        }\n        totalViewsCount++;\n      }\n    }\n    \n    return { success: true, viewsCount: totalViewsCount, sheetsCount: sheets.length };\n  } catch (error: any) {\n    throw new Error(`调整列宽失败: ${error.message}`);\n  }\n}\n\n// 按固定值调整列宽\nfunction adjustColumnWidthByFixedValue(width: number, applyScope: string = 'current', sheetId?: string) {\n  try {\n    if (!width || width < 100 || width > 1000) {\n      throw new Error('列宽必须在 100-1000 像素之间');\n    }\n    \n    const base = DingdocsScript.base;\n    let sheets = [];\n    \n    // 根据应用范围获取数据表\n    if (applyScope === 'allSheets') {\n      sheets = base.getSheets();\n    } else {\n      const sheet = sheetId ? base.getSheet(sheetId) : base.getActiveSheet();\n      if (!sheet) {\n        throw new Error('未找到指定的数据表');\n      }\n      sheets = [sheet];\n    }\n    \n    let totalViewsCount = 0;\n    \n    for (const sheet of sheets) {\n      const views = sheet.getViews();\n      const targetViews = applyScope === 'current'\n        ? [views.find((v: any) => v.getType() === 'Grid')].filter(Boolean)\n        : views.filter((v: any) => v.getType() === 'Grid');\n      \n      if (targetViews.length === 0) continue;\n      \n      const fields = sheet.getFields();\n      \n      for (const view of targetViews) {\n        const gridView = view.asGridView();\n        \n        for (const field of fields) {\n          const fieldId = field.getId();\n          gridView.setFieldWidth(fieldId, width);\n        }\n        totalViewsCount++;\n      }\n    }\n    \n    return { success: true, viewsCount: totalViewsCount, sheetsCount: sheets.length };\n  } catch (error: any) {\n    throw new Error(`调整列宽失败: ${error.message}`);\n  }\n}\n\n// 更新字段名称\nfunction updateFieldName(fieldId: string, newName: string, sheetId?: string) {\n  try {\n    if (!newName || newName.trim() === '') {\n      throw new Error('字段名称不能为空');\n    }\n    \n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    const field = sheet.getField(fieldId);\n    if (!field) {\n      throw new Error('未找到指定的字段');\n    }\n    \n    field.setName(newName.trim());\n    \n    return {\n      id: field.getId(),\n      name: field.getName(),\n      type: field.getType()\n    };\n  } catch (error: any) {\n    throw new Error(`更新字段名称失败: ${error.message}`);\n  }\n}\n\n// 获取字段可见性状态\nfunction getFieldVisibility(fieldId: string, sheetId?: string) {\n  try {\n    const gridView = getActiveView(sheetId);\n    const visibleFields = gridView.getVisibleFieldIdList();\n    return visibleFields.includes(fieldId);\n  } catch (error: any) {\n    throw new Error(`获取字段可见性失败: ${error.message}`);\n  }\n}\n\n// 显示字段\nfunction showFields(fieldIds: string | string[], sheetId?: string) {\n  try {\n    const gridView = getActiveView(sheetId);\n    const result = gridView.showField(fieldIds);\n    return { success: result };\n  } catch (error: any) {\n    throw new Error(`显示字段失败: ${error.message}`);\n  }\n}\n\n// 隐藏字段\nfunction hideFields(fieldIds: string | string[], sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    // 检查是否包含主键字段\n    const fieldIdArray = Array.isArray(fieldIds) ? fieldIds : [fieldIds];\n    for (const fieldId of fieldIdArray) {\n      const field = sheet.getField(fieldId);\n      if (field && field.isPrimary?.()) {\n        throw new Error('不能隐藏主键字段');\n      }\n    }\n    \n    const gridView = getActiveView(sheetId);\n    const result = gridView.hideField(fieldIds);\n    return { success: result };\n  } catch (error: any) {\n    throw new Error(`隐藏字段失败: ${error.message}`);\n  }\n}\n\n// 批量删除字段\nasync function deleteFields(fieldIds: string[], sheetId?: string) {\n  try {\n    const base = DingdocsScript.base;\n    let sheet;\n    if (sheetId) {\n      sheet = base.getSheet(sheetId);\n    } else {\n      sheet = base.getActiveSheet();\n    }\n    \n    if (!sheet) {\n      throw new Error('未找到指定的数据表');\n    }\n    \n    let successCount = 0;\n    const errors: string[] = [];\n    \n    for (const fieldId of fieldIds) {\n      try {\n        const field = sheet.getField(fieldId);\n        if (field && field.isPrimary?.()) {\n          errors.push(`字段 ${field.getName()} 是主键，不能删除`);\n          continue;\n        }\n        \n        sheet.deleteField(fieldId);\n        successCount++;\n      } catch (error: any) {\n        errors.push(`删除字段失败: ${error.message}`);\n      }\n    }\n    \n    return { \n      success: successCount > 0,\n      successCount,\n      totalCount: fieldIds.length,\n      errors\n    };\n  } catch (error: any) {\n    throw new Error(`批量删除字段失败: ${error.message}`);\n  }\n}\n\n// 注册所有方法供UI层调用\nDingdocsScript.registerScript('getActiveSheet', getActiveSheet);\nDingdocsScript.registerScript('getAllSheets', getAllSheets);\nDingdocsScript.registerScript('createSheet', createSheet);\nDingdocsScript.registerScript('deleteSheet', deleteSheet);\nDingdocsScript.registerScript('getSheetFields', getSheetFields);\nDingdocsScript.registerScript('addField', addField);\nDingdocsScript.registerScript('deleteField', deleteField);\nDingdocsScript.registerScript('getRecords', getRecords);\nDingdocsScript.registerScript('addRecord', addRecord);\nDingdocsScript.registerScript('updateRecord', updateRecord);\nDingdocsScript.registerScript('deleteRecord', deleteRecord);\nDingdocsScript.registerScript('getDocumentInfo', getDocumentInfo);\n\nexport {};\n\n\n// ==================== 注册所有脚本服务 ====================\n// 根据 AI表格边栏插件开发指南，需要使用 registerScript 注册所有函数\n\nDingdocsScript.registerScript('getActiveSheet', getActiveSheet);\nDingdocsScript.registerScript('getAllSheets', getAllSheets);\nDingdocsScript.registerScript('createSheet', createSheet);\nDingdocsScript.registerScript('deleteSheet', deleteSheet);\nDingdocsScript.registerScript('getSheetFields', getSheetFields);\nDingdocsScript.registerScript('addField', addField);\nDingdocsScript.registerScript('deleteField', deleteField);\nDingdocsScript.registerScript('getRecords', getRecords);\nDingdocsScript.registerScript('addRecord', addRecord);\nDingdocsScript.registerScript('updateRecord', updateRecord);\nDingdocsScript.registerScript('deleteRecord', deleteRecord);\nDingdocsScript.registerScript('getDocumentInfo', getDocumentInfo);\n\n// 新增的列宽调整功能\nDingdocsScript.registerScript('adjustColumnWidthByContent', adjustColumnWidthByContent);\nDingdocsScript.registerScript('adjustColumnWidthByHeader', adjustColumnWidthByHeader);\nDingdocsScript.registerScript('adjustColumnWidthByFixedValue', adjustColumnWidthByFixedValue);\n"],"names":["getActiveSheet","sheet","DingdocsScript","base","Error","id","getId","name","getName","desc","getDesc","fieldsCount","getFields","length","error","concat","message","getAllSheets","getSheets","map","createSheet","trim","insertSheet","type","deleteSheet","sheetId","console","log","success","getSheetFields","getSheet","field","_field$isPrimary","getType","isPrimary","call","addField","_field$isPrimary2","insertField","deleteField","fieldId","_field$isPrimary3","getField","async","getRecords","pageSize","arguments","undefined","result","getRecordsAsync","records","record","fields","getCellValues","hasMore","cursor","total","addRecord","insertRecordsAsync","updateRecord","recordId","updateRecordsAsync","deleteRecord","deleteRecordsAsync","getDocumentInfo","_base$getActiveSheet","uuid","getDentryUuid","sheetsCount","currentSheet","registerScript","applyScope","sheets","totalViewsCount","views","getViews","targetViews","find","v","filter","Boolean","view","gridView","asGridView","maxWidth","value","getCellValue","contentLength","text","String","width","Math","max","min","setFieldWidth","viewsCount"],"sourceRoot":""}